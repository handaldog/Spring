<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan base-package="com.ssafy.simple.model"></context:component-scan>
	
	<!-- 기존 Dao에서 Connection 관리 파트를 담당하는 객체 (DBUtil 대체) -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />					<!-- &는 &amp;로 입력  -->
		<property name="url" value="jdbc:mysql://localhost:3306/ssafy_yangyu?characterEncoding=UTF-8&amp;serverTimezone=UTC" />
		<property name="username" value="ssafy" />
		<property name="password" value="ssafy" />
	</bean>

	<!-- MyBatis 설정파일을 대체하는 객체 Config.xml  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.ssafy.simple.model.dto" /> <!-- 이 패키지 안에 있는 애들은 짧은 이름으로 쓰겠다 선언 -->
		<property name="mapperLocations" value="classpath:/**/model/mapper/*Mapper.xml" /> <!-- SQL이 들어있는 애들(Mapper)의 위치를 지정, **은 폴더 깊이를 와일드카드로 지정 -->
	</bean>
	
	<!-- 기존 Dao에서 ?, ?, ? 를 채우던 것과 ResultSet에서 getString, getInt 하던것을 대신 해주는 얘 -->
	<!-- mapperScanner가 이 역할을 대신 해줄수 있음 -->
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean> -->
	
	<!-- @Mapper : 클래스가 아니라 인터페이스에 붙이는 어노테이션, 생략 해도 정상 실행 가능 -->
	<!-- BoardMapper 인터페이스를 Dao 객체로 생성해주는 Proxy 관리자, 이름을 반드시 mapperScannerConfigurer로 설정해야한다! -->
	<!-- <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssafy.simple.model.mapper"></property>
	</bean> -->
	<mybatis-spring:scan base-package="com.ssafy.simple.model.mapper"/>
	
	<!-- AOP에서 공통작업을 구현한 클래스 역할을 해주는 객체 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- AOP에서 pointcut 잡고 before, after 등등 작업하던거 그냥 어노테이션 처리 가능하도록 해주는 프록시 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>
